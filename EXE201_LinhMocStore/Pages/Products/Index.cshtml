@page
@model EXE201_LinhMocStore.Pages.Products.IndexModel
@{
    ViewData["Title"] = "Sản phẩm - Linh Mộc Store";
    var isLoggedIn = Model.isLoggedIn;
    var isAdmin = Model.isAdmin;
}
@Html.AntiForgeryToken()

<div class="container py-5">
    <div class="row">
        <!-- Sidebar Filters -->
        <div class="col-lg-3 mb-4">
            <div class="filter-sidebar">
                <h4 class="filter-title mb-4">Bộ lọc sản phẩm</h4>
                
                <!-- Search Box -->
                <div class="search-box mb-4">
                    <form method="get" class="d-flex">
                        <input type="text" name="searchTerm" class="form-control" placeholder="Tìm kiếm..." value="@Model.SearchTerm">
                        <button type="submit" class="btn btn-primary ms-2">
                            <i class="fas fa-search"></i>
                        </button>
                    </form>
                </div>

                <!-- Price Range -->
                <div class="filter-section mb-4">
                    <h5 class="filter-section-title">Khoảng giá</h5>
                    <form method="get" id="priceFilterForm">
                        <div class="mb-2">
                            <input type="number" name="minPrice" class="form-control" placeholder="Từ" value="@Model.MinPrice">
                        </div>
                        <div class="mb-2">
                            <input type="number" name="maxPrice" class="form-control" placeholder="Đến" value="@Model.MaxPrice">
                        </div>
                        <button type="submit" class="btn btn-outline-primary w-100">Áp dụng</button>
                    </form>
                </div>

                <!-- Material Filter -->
                <div class="filter-section mb-4">
                    <h5 class="filter-section-title">Chất liệu</h5>
                    <form method="get" id="materialFilterForm">
                        <div class="material-filters">
                            @foreach (var material in Model.Materials)
                            {
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" name="materials" value="@material" 
                                           id="material-@material" @(Model.SelectedMaterials?.Contains(material) == true ? "checked" : "")>
                                    <label class="form-check-label" for="material-@material">
                                        @material
                                    </label>
                                </div>
                            }
                        </div>
                        @if (!string.IsNullOrEmpty(Model.SearchTerm))
                        {
                            <input type="hidden" name="searchTerm" value="@Model.SearchTerm" />
                        }
                        @if (Model.MinPrice.HasValue)
                        {
                            <input type="hidden" name="minPrice" value="@Model.MinPrice" />
                        }
                        @if (Model.MaxPrice.HasValue)
                        {
                            <input type="hidden" name="maxPrice" value="@Model.MaxPrice" />
                        }
                        @if (!string.IsNullOrEmpty(Model.SortBy))
                        {
                            <input type="hidden" name="sortBy" value="@Model.SortBy" />
                        }
                        <button type="submit" class="btn btn-outline-primary w-100 mt-3">Áp dụng bộ lọc</button>
                    </form>
                </div>
            </div>
        </div>

        <!-- Product Grid -->
        <div class="col-lg-9">
            <!-- Sort Options -->
            <div class="sort-options mb-4">
                <div class="d-flex justify-content-between align-items-center">
                    <div class="results-count">
                        Hiển thị @Model.Products.Count() sản phẩm
                    </div>
                    <div class="sort-dropdown">
                        <form method="get" id="sortForm">
                            @{
                                var sortOptions = new[]
                                {
                                    new { Value = "name_asc", Text = "Tên A-Z" },
                                    new { Value = "name_desc", Text = "Tên Z-A" },
                                    new { Value = "price_asc", Text = "Giá tăng dần" },
                                    new { Value = "price_desc", Text = "Giá giảm dần" }
                                };
                            }
                            <select class="form-select" name="sortBy" onchange="document.getElementById('sortForm').submit()">
                                @foreach (var option in sortOptions)
                                {
                                    if (option.Value == Model.SortBy)
                                    {
                                        <option value="@option.Value" selected>@option.Text</option>
                                    }
                                    else
                                    {
                                        <option value="@option.Value">@option.Text</option>
                                    }
                                }
                            </select>
                            @if (!string.IsNullOrEmpty(Model.SearchTerm))
                            {
                                <input type="hidden" name="searchTerm" value="@Model.SearchTerm" />
                            }
                            @if (Model.MinPrice.HasValue)
                            {
                                <input type="hidden" name="minPrice" value="@Model.MinPrice" />
                            }
                            @if (Model.MaxPrice.HasValue)
                            {
                                <input type="hidden" name="maxPrice" value="@Model.MaxPrice" />
                            }
                            @if (Model.SelectedMaterials != null)
                            {
                                foreach (var material in Model.SelectedMaterials)
                                {
                                    <input type="hidden" name="materials" value="@material" />
                                }
                            }
                        </form>
                    </div>
                </div>
            </div>

            <!-- Products Grid -->
            <div class="row">
                @foreach (var product in Model.Products)
                {
                    <div class="col-md-4 mb-4">
                        <div class="card h-100 product-card">
                            <div class="card-img-wrapper">
                                <img src="@(string.IsNullOrEmpty(product.Image) ? "/images/no-image.jpg" : product.Image)" 
                                     class="card-img-top" alt="@product.Name">
                            </div>
                            <div class="card-body d-flex flex-column">
                                <h5 class="card-title">@product.Name</h5>
                                <p class="card-text text-muted small mb-2">
                                    <i class="fas fa-gem me-1"></i> @(string.IsNullOrEmpty(product.Material) ? "Không có thông tin" : product.Material)
                                </p>
                                <p class="card-text text-primary fw-bold mb-3">@product.Price.ToString("N0") VNĐ</p>
                                <div class="mt-auto">
                                    <div class="d-grid gap-2">
                                        @if (product.Quantity > 0)
                                        {
                                            @if (!isAdmin)
                                            {
                                                <button type="button" class="btn btn-outline-primary add-to-cart-btn" 
                                                        data-product-id="@product.ProductId"
                                                        onclick="addToCart(this)">
                                                    <i class="fas fa-shopping-cart me-2"></i>Thêm vào giỏ
                                                </button>
                                            }
                                        }
                                        else
                                        {
                                            <button type="button" class="btn btn-secondary" disabled>Hết hàng</button>
                                        }
                                        <a href="/products/details/@product.ProductId" class="btn btn-primary">Xem chi tiết</a>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>

            <!-- Pagination -->
            @if (Model.TotalPages > 1)
            {
                <nav aria-label="Page navigation" class="mt-4">
                    <ul class="pagination justify-content-center">
                        <li class="page-item @(Model.p == 1 ? "disabled" : "")">
                            <a class="page-link" href="?p=@(Model.p - 1)@Html.Raw(Model.QueryString)" aria-label="Previous">
                                <span aria-hidden="true">&laquo;</span>
                            </a>
                        </li>
                        @for (int i = 1; i <= Model.TotalPages; i++)
                        {
                            <li class="page-item @(i == Model.p ? "active" : "")">
                                <a class="page-link" href="?p=@i@Html.Raw(Model.QueryString)">@i</a>
                            </li>
                        }
                        <li class="page-item @(Model.p == Model.TotalPages ? "disabled" : "")">
                            <a class="page-link" href="?p=@(Model.p + 1)@Html.Raw(Model.QueryString)" aria-label="Next">
                                <span aria-hidden="true">&raquo;</span>
                            </a>
                        </li>
                    </ul>
                </nav>
            }
        </div>
    </div>
</div>

@section Scripts {
    <script>
        const isLoggedIn = @isLoggedIn.ToString().ToLower();
        const isAdmin = @isAdmin.ToString().ToLower();

        function showToast(message, isError = false) {
            const container = document.getElementById('toast-container');
            if (!container) return;

            const toast = document.createElement('div');
            toast.className = 'toast-message';
            toast.classList.add(isError ? 'error' : 'success');
            toast.textContent = message;
            
            container.appendChild(toast);
            
            setTimeout(() => {
                toast.classList.add('show');
            }, 100);
            
            setTimeout(() => {
                toast.classList.remove('show');
                setTimeout(() => toast.remove(), 400);
            }, 3000);
        }

        async function addToCart(button) {
            if (isAdmin) {
                showToast('Admin không thể thêm vào giỏ hàng', true);
                return;
            }
            
            if (!isLoggedIn) {
                showToast('Vui lòng đăng nhập để thêm vào giỏ hàng', true);
                return;
            }

            const productId = button.dataset.productId;
            const originalHtml = button.innerHTML;
            
            button.disabled = true;
            button.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';

            try {
                const res = await fetch('?handler=AddToCartAjax', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify({ ProductId: parseInt(productId), Quantity: 1 })
                });
                
                const data = await res.json();
                
                if (data.success) {
                    showToast('Đã thêm vào giỏ hàng thành công!');
                    if (typeof cart !== 'undefined' && cart.updateCartBadge) {
                        cart.updateCartBadge();
                    }
                } else {
                    showToast(data.message || 'Lỗi khi thêm vào giỏ hàng', true);
                }
            } catch (error) {
                showToast('Lỗi kết nối. Vui lòng thử lại.', true);
            } finally {
                button.disabled = false;
                button.innerHTML = originalHtml;
            }
        }
        
        // Gắn event listener cho nút khi DOM đã tải xong
        document.addEventListener('DOMContentLoaded', function() {
            const buttons = document.querySelectorAll('.add-to-cart-btn');
            buttons.forEach(button => {
                button.onclick = function() {
                    addToCart(this);
                };
            });
        });
    </script>
} 