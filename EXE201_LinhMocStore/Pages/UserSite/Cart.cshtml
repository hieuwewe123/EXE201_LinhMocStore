@page
@model EXE201_LinhMocStore.Pages.UserSite.CartModel
@{
    ViewData["Title"] = "Giỏ hàng - Linh Mộc Store";
    var sync = Request.Query["sync"].ToString() == "1";
    var returnUrl = Request.Query["returnUrl"].ToString();
}

<div class="container py-5">
    <div class="row">
        <div class="col-12">
            <div class="cart-header mb-4">
                <h1 class="cart-title">
                    <i class="fas fa-shopping-cart me-3"></i>Giỏ hàng của bạn
                </h1>
                <p class="cart-subtitle text-muted">Quản lý sản phẩm trong giỏ hàng</p>
            </div>
        </div>
    </div>
    

    @if (!Model.CartProducts.Any())
    {
        <div class="empty-cart">
            <div class="empty-cart-icon">
                <i class="fas fa-shopping-bag"></i>
            </div>
            <h3 class="empty-cart-title">Giỏ hàng của bạn đang trống</h3>
            <p class="empty-cart-description">Hãy khám phá các sản phẩm phong thủy tuyệt đẹp của chúng tôi</p>
            <div class="empty-cart-actions">
                <a href="/Products" class="btn btn-primary btn-lg">
                    <i class="fas fa-gem me-2"></i>Khám phá sản phẩm
                </a>
                <a href="/" class="btn btn-outline-primary btn-lg">
                    <i class="fas fa-home me-2"></i>Về trang chủ
                </a>
            </div>
        </div>
    }
    else
    {
        <form method="post" id="cartForm">
            @Html.AntiForgeryToken()
            
            <!-- Desktop View -->
            <div class="d-none d-lg-block">
                <div class="card cart-card">
                    <div class="card-header cart-card-header">
                        <div class="row align-items-center">
                            <div class="col-1">
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" id="selectAll" onchange="handleSelectAll()">
                                    <label class="form-check-label" for="selectAll">Tất cả</label>
                                </div>
                            </div>
                            <div class="col-3">Sản phẩm</div>
                            <div class="col-2 text-center">Giá</div>
                            <div class="col-2 text-center">Số lượng</div>
                            <div class="col-2 text-end">Tổng</div>
                            <div class="col-2 text-center">Hành động</div>
                        </div>
                    </div>
                    <div class="card-body p-0">
                        @foreach (var item in Model.CartProducts)
                        {
                            <div class="cart-item" id="cart-item-@item.CartItemId" data-cart-item-id="@item.CartItemId">
                                <div class="row align-items-center py-3 border-bottom">
                                    <div class="col-1">
                                        <div class="form-check">
                                            <input type="checkbox"
                                                   class="form-check-input item-checkbox"
                                                   id="checkbox-@item.CartItemId"
                                                   name="SelectedIds"
                                                   value="@item.CartItemId"
                                                   onchange="updateSelection()" />
                                        </div>
                                    </div>
                                    <div class="col-3">
                                        <div class="cart-item-product">
                                            <div class="cart-item-image">
                                                <img src="@(string.IsNullOrEmpty(item.Product?.Image) ? "/images/no-image.jpg" : item.Product.Image)" 
                                                     alt="@item.Product?.Name" 
                                                     class="product-image">
                                            </div>
                                            <div class="cart-item-details">
                                                <h6 class="cart-item-name">
                                                    <a href="/UserSite/Products/Details/@item.Product?.ProductId" class="text-decoration-none">
                                                        @item.Product?.Name
                                                    </a>
                                                </h6>
                                                <p class="cart-item-material">
                                                    <i class="fas fa-gem me-1"></i>
                                                    @(string.IsNullOrEmpty(item.Product?.Material) ? "Không có thông tin" : item.Product.Material)
                                                </p>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-2 text-center">
                                        <div class="cart-item-price">
                                            <span class="price-amount">@item.Product?.Price.ToString("N0")</span>
                                            <span class="price-currency">VNĐ</span>
                                        </div>
                                    </div>
                                    <div class="col-2">
                                        <div class="quantity-controls">
                                            <div class="quantity-input-group">
                                                <button type="button" class="btn btn-quantity quantity-minus" 
                                                        data-cart-item-id="@item.CartItemId" data-increment="-1">
                                                    <i class="fas fa-minus"></i>
                                                </button>
                                                <input type="number"
                                                       name="Quantities[@item.CartItemId]"
                                                       value="@item.Quantity"
                                                       min="1"
                                                       max="@item.Product?.Quantity"
                                                       class="form-control quantity-input"
                                                       data-cart-item-id="@item.CartItemId"
                                                       data-product-id="@item.Product?.ProductId"
                                                       data-product-name="@item.Product?.Name" />
                                                <button type="button" class="btn btn-quantity quantity-plus" 
                                                        data-cart-item-id="@item.CartItemId" data-increment="1">
                                                    <i class="fas fa-plus"></i>
                                                </button>
                                            </div>
                                            <div class="quantity-info">
                                                <small class="text-muted">
                                                    Còn lại: <span class="remaining-quantity" data-product-id="@item.Product?.ProductId">@item.Product?.Quantity</span>
                                                </small>
                                                @if (item.Product?.Quantity <= 5 && item.Product?.Quantity > 0)
                                                {
                                                    <div class="stock-warning">
                                                        <i class="fas fa-exclamation-triangle"></i>
                                                        <small>Chỉ còn @item.Product?.Quantity sản phẩm!</small>
                                                    </div>
                                                }
                                                else if (item.Product?.Quantity == 0)
                                                {
                                                    <div class="stock-danger">
                                                        <i class="fas fa-times-circle"></i>
                                                        <small>Sản phẩm đã hết hàng!</small>
                                                    </div>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-2 text-end">
                                        <div class="cart-item-total" id="total-@item.CartItemId">
                                            <span class="total-amount">@((item.Quantity * (item.Product?.Price ?? 0)).ToString("N0"))</span>
                                            <span class="total-currency">VNĐ</span>
                                        </div>
                                    </div>
                                    <div class="col-2 text-center">
                                        <button type="button"
                                                class="btn btn-remove delete-cart-item"
                                                data-cart-item-id="@item.CartItemId">
                                            <i class="fas fa-trash-alt"></i>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>

            <!-- Mobile View -->
            <div class="d-lg-none">
                @foreach (var item in Model.CartProducts)
                {
                    <div class="card cart-item-mobile mb-3" data-cart-item-id="@item.CartItemId">
                        <div class="card-body">
                            <div class="row">
                                <div class="col-2">
                                    <div class="form-check">
                                        <input type="checkbox"
                                               class="form-check-input item-checkbox"
                                               id="checkbox-mobile-@item.CartItemId"
                                               name="SelectedIds"
                                               value="@item.CartItemId"
                                               onchange="updateSelection()" />
                                    </div>
                                </div>
                                <div class="col-10">
                                    <div class="cart-item-mobile-content">
                                        <div class="cart-item-mobile-image">
                                            <img src="@(string.IsNullOrEmpty(item.Product?.Image) ? "/images/no-image.jpg" : item.Product.Image)" 
                                                 alt="@item.Product?.Name" 
                                                 class="product-image-mobile">
                                        </div>
                                        <div class="cart-item-mobile-details">
                                            <h6 class="cart-item-mobile-name">
                                                <a href="/UserSite/Products/Details/@item.Product?.ProductId" class="text-decoration-none">
                                                    @item.Product?.Name
                                                </a>
                                            </h6>
                                            <div class="cart-item-mobile-price">
                                                <span class="price-amount">@item.Product?.Price.ToString("N0")</span>
                                                <span class="price-currency">VNĐ</span>
                                            </div>
                                            <div class="quantity-controls-mobile">
                                                <div class="quantity-input-group-mobile">
                                                    <button type="button" class="btn btn-quantity-mobile quantity-minus"
                                                            data-cart-item-id="@item.CartItemId" data-increment="-1">
                                                        <i class="fas fa-minus"></i>
                                                    </button>
                                                    <input type="number"
                                                           name="Quantities[@item.CartItemId]"
                                                           value="@item.Quantity"
                                                           min="1"
                                                           max="@item.Product?.Quantity"
                                                           class="form-control quantity-input-mobile"
                                                           data-cart-item-id="@item.CartItemId"
                                                           data-product-id="@item.Product?.ProductId"
                                                           data-product-name="@item.Product?.Name" />
                                                    <button type="button" class="btn btn-quantity-mobile quantity-plus"
                                                            data-cart-item-id="@item.CartItemId" data-increment="1">
                                                        <i class="fas fa-plus"></i>
                                                    </button>
                                                </div>
                                                <div class="quantity-info-mobile">
                                                    <small class="text-muted">
                                                        Còn lại: <span class="remaining-quantity" data-product-id="@item.Product?.ProductId">@item.Product?.Quantity</span>
                                                    </small>
                                                    @if (item.Product?.Quantity <= 5 && item.Product?.Quantity > 0)
                                                    {
                                                        <div class="stock-warning">
                                                            <i class="fas fa-exclamation-triangle"></i>
                                                            <small>Chỉ còn @item.Product?.Quantity sản phẩm!</small>
                                                        </div>
                                                    }
                                                    else if (item.Product?.Quantity == 0)
                                                    {
                                                        <div class="stock-danger">
                                                            <i class="fas fa-times-circle"></i>
                                                            <small>Sản phẩm đã hết hàng!</small>
                                                        </div>
                                                    }
                                                </div>
                                            </div>
                                            <div class="cart-item-mobile-total" id="total-mobile-@item.CartItemId">
                                                <span class="total-label">Tổng:</span>
                                                <span class="total-amount">@((item.Quantity * (item.Product?.Price ?? 0)).ToString("N0"))</span>
                                                <span class="total-currency">VNĐ</span>
                                            </div>
                                            <div class="cart-item-mobile-actions">
                                                <button type="button"
                                                        class="btn btn-remove-mobile delete-cart-item"
                                                        data-cart-item-id="@item.CartItemId">
                                                    <i class="fas fa-trash-alt"></i> Xóa
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>

            <!-- Thông tin địa chỉ giao hàng -->
            <div class="card shadow-sm mb-4">
                <div class="card-header bg-white">
                    <h4 class="mb-0">
                        <i class="fas fa-map-marker-alt text-primary me-2"></i>
                        Địa chỉ giao hàng
                    </h4>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-check mb-3">
                                <input class="form-check-input" type="radio" name="addressOption" id="currentAddress" value="current" checked>
                                <label class="form-check-label" for="currentAddress">
                                    <strong>Sử dụng địa chỉ hiện tại</strong>
                                </label>
                                <div class="mt-2 text-muted small">
                                    <i class="fas fa-user me-1"></i> @(string.IsNullOrEmpty(Model.CurrentUser?.NormalName) ? "Chưa có tên" : Model.CurrentUser.NormalName)<br>
                                    <i class="fas fa-phone me-1"></i> @(string.IsNullOrEmpty(Model.CurrentUser?.PhoneNumber) ? "Chưa có số điện thoại" : Model.CurrentUser.PhoneNumber)<br>
                                    <i class="fas fa-map-marker-alt me-1"></i> @(string.IsNullOrEmpty(Model.CurrentUser?.Address) ? "Chưa có địa chỉ" : Model.CurrentUser.Address)
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-check mb-3">
                                <input class="form-check-input" type="radio" name="addressOption" id="newAddress" value="new">
                                <label class="form-check-label" for="newAddress">
                                    <strong>Nhập địa chỉ mới</strong>
                                </label>
                            </div>
                        </div>
                    </div>

                    <!-- Form nhập địa chỉ mới -->
                    <div id="newAddressForm" class="mt-3" style="display: none;">
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="receiverName" class="form-label">Tên người nhận <span class="text-danger">*</span></label>
                                <input type="text" class="form-control" id="receiverName" name="receiverName" value="@Model.CurrentUser?.NormalName">
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="receiverPhone" class="form-label">Số điện thoại <span class="text-danger">*</span></label>
                                <input type="tel" class="form-control" id="receiverPhone" name="receiverPhone" value="@Model.CurrentUser?.PhoneNumber">
                            </div>
                        </div>
                        <div class="mb-3">
                            <label for="receiverAddress" class="form-label">Địa chỉ giao hàng <span class="text-danger">*</span></label>
                            <textarea class="form-control" id="receiverAddress" name="receiverAddress" rows="3" placeholder="Nhập địa chỉ chi tiết (số nhà, đường, phường/xã, quận/huyện, tỉnh/thành phố)"></textarea>
                        </div>
                        <div class="mb-3">
                            <label for="deliveryNote" class="form-label">Ghi chú giao hàng</label>
                            <textarea class="form-control" id="deliveryNote" name="deliveryNote" rows="2" placeholder="Hướng dẫn giao hàng, thời gian nhận hàng..."></textarea>
                        </div>
                    </div>

                    <!-- Hiển thị địa chỉ đã chọn -->
                    <div id="selectedAddressInfo" class="mt-3 p-3 bg-light rounded">
                        <h6 class="mb-2"><i class="fas fa-check-circle text-success me-2"></i>Địa chỉ giao hàng:</h6>
                        <div id="addressDisplay">
                            <strong>@Model.CurrentUser?.NormalName</strong><br>
                            <i class="fas fa-phone me-1"></i> @Model.CurrentUser?.PhoneNumber<br>
                            <i class="fas fa-map-marker-alt me-1"></i> @(string.IsNullOrEmpty(Model.CurrentUser?.Address) ? "Chưa có địa chỉ" : Model.CurrentUser.Address)
                        </div>
                    </div>
                </div>
            </div>

            <!-- Cart Summary -->
            <div class="cart-summary">
                <div class="row">
                    <div class="col-lg-8">
                        <div class="cart-actions">
                            <a href="/UserSite/Products" class="btn btn-outline-primary">
                                <i class="fas fa-arrow-left me-2"></i>Tiếp tục mua sắm
                            </a>
                        </div>
                    </div>
                    <div class="col-lg-4">
                        <div class="cart-total-card">
                            <div class="cart-total-header">
                                <h5 class="mb-0">Tổng đơn hàng</h5>
                            </div>
                            <div class="cart-total-body">
                                <div class="cart-total-item">
                                    <span>Tạm tính:</span>
                                    <span id="subtotal">0 VNĐ</span>
                                </div>
                                <div class="cart-total-item">
                                    <span>Phí vận chuyển:</span>
                                    <span id="shipping">Miễn phí</span>
                                </div>
                                <hr>
                                <div class="cart-total-item cart-total-final">
                                    <span>Tổng cộng:</span>
                                    <span id="grandTotal">0 VNĐ</span>
                                </div>
                                <div id="cartWarnings"></div>
                            </div>
                            <div class="cart-total-footer">
                                <button type="button" 
                                        class="btn btn-primary btn-lg w-100 checkout-btn" 
                                        id="checkoutBtn">
                                    <i class="fas fa-shopping-bag me-2"></i>Xác nhận đơn hàng
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </form>
    }
</div>

@section Scripts {
    <script>
        const isLoggedIn = @(Model.isLoggedIn ? "true" : "false");
        
        // Badge sẽ được khởi tạo tự động bởi site.js
        
        // Debounce function to prevent spamming requests
        function debounce(func, delay) {
            let timeout;
            return function(...args) {
                const context = this;
                clearTimeout(timeout);
                timeout = setTimeout(() => func.apply(context, args), delay);
            };
        }

        // Function to make API requests with timeout
        async function makeRequest(url, options, timeout = 10000) {
            const controller = new AbortController();
            const timeoutId = setTimeout(() => controller.abort(), timeout);
            
            try {
                const response = await fetch(url, {
                    ...options,
                    signal: controller.signal
                });
                clearTimeout(timeoutId);
                return response;
            } catch (error) {
                clearTimeout(timeoutId);
                if (error.name === 'AbortError') {
                    throw new Error('Request timeout. Vui lòng thử lại.');
                }
                throw error;
            }
        }

        // Improved showToast function with better styling
        function showToast(message, isError = false) {
            const toast = document.createElement('div');
            toast.className = `toast-message ${isError ? 'error' : 'success'}`;
            toast.innerHTML = `
                <i class="fas ${isError ? 'fa-times-circle' : 'fa-check-circle'} me-2"></i>
                ${message}
            `;
            document.body.appendChild(toast);
            
            setTimeout(() => {
                toast.classList.add('show');
            }, 100);
            
            setTimeout(() => {
                toast.classList.remove('show');
                setTimeout(() => toast.remove(), 300);
            }, 3000);
        }

        function getSelectedIds() {
            const checkboxes = document.querySelectorAll('.item-checkbox:checked');
            const ids = Array.from(checkboxes).map(cb => parseInt(cb.value));
            
            console.log('Selected checkboxes:', checkboxes.length);
            console.log('Selected IDs:', ids);
            
            // Check for duplicates
            const uniqueIds = [...new Set(ids)];
            if (uniqueIds.length !== ids.length) {
                console.warn('Duplicate IDs found! Original:', ids, 'Unique:', uniqueIds);
            }
            
            return uniqueIds; // Return unique IDs to prevent duplicates
        }

        async function updateCartItem(id, quantity) {
            // Validate quantity before sending request
            if (quantity < 1) {
                showToast('Số lượng phải lớn hơn 0', true);
                return;
            }

            // Get the product stock limit from the input max attribute
            const input = document.querySelector(`input[data-cart-item-id="${id}"]`);
            if (!input) {
                showToast('Không tìm thấy sản phẩm', true);
                return;
            }
            
            const maxStock = parseInt(input.getAttribute('max')) || 0;
            const productId = input.getAttribute('data-product-id');
            
            if (quantity > maxStock) {
                showToast(`Chỉ còn ${maxStock} sản phẩm trong kho`, true);
                quantity = maxStock;
            }

            const selectedIds = getSelectedIds();
            const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

            try {
                const res = await makeRequest('?handler=UpdateAndGetTotals', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': token
                    },
                    body: JSON.stringify({ Id: id, Quantity: quantity, SelectedIds: selectedIds })
                });

                const data = await res.json();

                if (data.success) {
                    // Update quantity input for both views
                    const inputs = document.querySelectorAll(`input[data-cart-item-id="${id}"]`);
                    inputs.forEach(input => {
                        input.value = data.newQuantity;
                        // Update max attribute if stock changed
                        if (data.stock !== undefined) {
                            input.setAttribute('max', data.stock);
                        }
                    });

                    // Update item total for both views
                    const totalElements = document.querySelectorAll(`#total-${id} .total-amount, #total-mobile-${id} .total-amount`);
                    totalElements.forEach(el => el.textContent = data.itemTotal.toLocaleString('vi-VN'));
                    
                    // Update remaining quantity - fix the selector to use product ID instead of cart item ID
                    const remainingElements = document.querySelectorAll(`.remaining-quantity[data-product-id="${productId}"]`);
                    remainingElements.forEach(el => el.textContent = data.stock || maxStock);

                    updateTotalsUI(data.grandTotal);
                    
                    // Cập nhật số lượng giỏ hàng trong badge nếu có
                    if (data.totalCartItems !== undefined) {
                        const badge = document.getElementById('cartBadge');
                        if (badge) {
                            badge.textContent = data.totalCartItems;
                            badge.style.display = data.totalCartItems > 0 ? 'block' : 'none';
                        }
                    }
                    
                    // Show success message for quantity changes
                    if (quantity !== parseInt(input.value)) {
                        showToast('Đã cập nhật số lượng sản phẩm');
                    }
                    
                    // Update controls state
                    updateQuantityControlsState();
                } else {
                    // Revert to previous quantity if update failed
                    const inputs = document.querySelectorAll(`input[data-cart-item-id="${id}"]`);
                    inputs.forEach(input => input.value = data.newQuantity || 1);
                    showToast(data.message, true);
                }
            } catch (error) {
                console.error('Update cart error:', error);
                showToast('Không thể cập nhật giỏ hàng. Vui lòng thử lại.', true);
            }
        }

        // Debounced version of updateCartItem for better performance
        const debouncedUpdateCartItem = debounce(updateCartItem, 300);

        // Function to handle quantity input changes with validation
        function handleQuantityChange(cartItemId, newValue) {
            const input = document.querySelector(`input[data-cart-item-id="${cartItemId}"]`);
            const maxStock = parseInt(input.getAttribute('max')) || 0;
            let quantity = parseInt(newValue) || 1;
            
            // Validate quantity
            if (quantity < 1) {
                quantity = 1;
            } else if (quantity > maxStock) {
                quantity = maxStock;
                showToast(`Chỉ còn ${maxStock} sản phẩm trong kho`, true);
            }
            
            // Update input value
            const inputs = document.querySelectorAll(`input[data-cart-item-id="${cartItemId}"]`);
            inputs.forEach(input => input.value = quantity);
            
            // Call debounced update
            debouncedUpdateCartItem(cartItemId, quantity);
        }

        // Function to validate input on blur
        function validateQuantityInput(cartItemId) {
            const input = document.querySelector(`input[data-cart-item-id="${cartItemId}"]`);
            if (!input) return;
            
            const maxStock = parseInt(input.getAttribute('max')) || 0;
            let quantity = parseInt(input.value) || 1;
            const originalQuantity = quantity;
            
            // Validate and correct quantity
            if (quantity < 1) {
                quantity = 1;
            } else if (quantity > maxStock) {
                quantity = maxStock;
            }
            
            // Update all inputs for this cart item
            const inputs = document.querySelectorAll(`input[data-cart-item-id="${cartItemId}"]`);
            inputs.forEach(input => input.value = quantity);
            
            // Update cart if quantity changed
            if (quantity !== originalQuantity) {
                debouncedUpdateCartItem(cartItemId, quantity);
            }
        }

        // Function to handle quantity button clicks
        function handleQuantityButtonClick(cartItemId, increment) {
            const input = document.querySelector(`input[data-cart-item-id="${cartItemId}"]`);
            const currentValue = parseInt(input.value) || 1;
            const maxStock = parseInt(input.getAttribute('max')) || 0;
            const newValue = currentValue + increment;
            
            // Check if product is out of stock
            if (maxStock === 0) {
                showToast('Sản phẩm đã hết hàng', true);
                return;
            }
            
            if (newValue >= 1 && newValue <= maxStock) {
                handleQuantityChange(cartItemId, newValue);
            } else if (newValue < 1) {
                showToast('Số lượng phải lớn hơn 0', true);
            } else if (newValue > maxStock) {
                showToast(`Chỉ còn ${maxStock} sản phẩm trong kho`, true);
            }
        }

        // Function to disable/enable quantity controls based on stock
        function updateQuantityControlsState() {
            const inputs = document.querySelectorAll('input[data-cart-item-id]');
            inputs.forEach(input => {
                const cartItemId = input.getAttribute('data-cart-item-id');
                const maxStock = parseInt(input.getAttribute('max')) || 0;
                const currentValue = parseInt(input.value) || 1;
                
                // Get all related buttons for this cart item (both desktop and mobile)
                const minusButtons = document.querySelectorAll(`button[data-cart-item-id="${cartItemId}"][data-increment="-1"]`);
                const plusButtons = document.querySelectorAll(`button[data-cart-item-id="${cartItemId}"][data-increment="1"]`);
                
                // Disable input and buttons if out of stock
                if (maxStock === 0) {
                    input.disabled = true;
                    minusButtons.forEach(btn => btn.disabled = true);
                    plusButtons.forEach(btn => btn.disabled = true);
                } else {
                    input.disabled = false;
                    minusButtons.forEach(btn => btn.disabled = currentValue <= 1);
                    plusButtons.forEach(btn => btn.disabled = currentValue >= maxStock);
                }
            });
        }

        async function deleteCartItem(id) {
            if (!confirm('Bạn có chắc chắn muốn xóa sản phẩm này?')) return;
            
            const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

            try {
                const res = await makeRequest(`?handler=DeleteSingle&id=${id}`, {
                    method: 'POST',
                    headers: {
                        'RequestVerificationToken': token
                    }
                });
                const data = await res.json();

                if(data.success) {
                    // Remove the cart item elements
                    document.querySelectorAll(`[data-cart-item-id="${id}"]`).forEach(el => el.remove());
                    showToast('Đã xóa sản phẩm khỏi giỏ hàng.');
                    
                    // Cập nhật số lượng giỏ hàng trong badge
                    if (data.totalCartItems !== undefined) {
                        const badge = document.getElementById('cartBadge');
                        if (badge) {
                            badge.textContent = data.totalCartItems;
                            badge.style.display = data.totalCartItems > 0 ? 'block' : 'none';
                        }
                    }
                    
                    // Check if cart is now empty
                    const remainingItems = document.querySelectorAll('[data-cart-item-id]');
                    if (remainingItems.length === 0) {
                        // Reload page to show empty cart state
                        window.location.reload();
                        return;
                    }
                    
                    await updateSelection();
                    updateQuantityControlsState();
                } else {
                    showToast(data.message || 'Lỗi khi xóa sản phẩm.', true);
                }
            } catch (error) {
                console.error('Delete cart item error:', error);
                showToast('Không thể xóa sản phẩm. Vui lòng thử lại.', true);
            }
        }
        
        function calculateGrandTotal(selectedIds) {
            let total = 0;
            selectedIds.forEach(id => {
                const input = document.querySelector(`input[name="Quantities[${id}]"]`);
                if (input) {
                    const quantity = parseInt(input.value) || 1;
                    const priceElement = document.querySelector(`#total-${id} .total-amount`);
                    if (priceElement) {
                        const priceText = priceElement.textContent.replace(/[^\d]/g, '');
                        const price = parseInt(priceText) || 0;
                        total += price;
                    }
                }
            });
            return total;
        }

        function updateSelection() {
            const selectedIds = getSelectedIds();
            const grandTotal = calculateGrandTotal(selectedIds);
            
            // Sync checkboxes between desktop and mobile views
            selectedIds.forEach(id => {
                const desktopCheckbox = document.getElementById(`checkbox-${id}`);
                const mobileCheckbox = document.getElementById(`checkbox-mobile-${id}`);
                
                if (desktopCheckbox && mobileCheckbox) {
                    desktopCheckbox.checked = true;
                    mobileCheckbox.checked = true;
                }
            });
            
            // Uncheck checkboxes that are not in selectedIds
            const allCheckboxes = document.querySelectorAll('.item-checkbox');
            allCheckboxes.forEach(checkbox => {
                const id = parseInt(checkbox.value);
                if (!selectedIds.includes(id)) {
                    checkbox.checked = false;
                }
            });
            
            updateTotalsUI(grandTotal);
        }
        
        // Global flag to prevent multiple checkout requests
        let isCheckoutInProgress = false;
        let checkoutRequestId = 0;
        let eventListenersInitialized = false;

        async function checkout() {
            // Prevent multiple checkout requests
            if (isCheckoutInProgress) {
                console.log('Checkout already in progress, ignoring request');
                return;
            }
            
            const currentRequestId = ++checkoutRequestId;
            console.log(`Starting checkout request #${currentRequestId}`);
            
            const selectedIds = getSelectedIds();
            
            if (selectedIds.length === 0) {
                showToast('Vui lòng chọn sản phẩm để thanh toán.', true);
                return;
            }
            
            // Validate quantities and build items array
            const items = selectedIds.map(id => {
                const input = document.querySelector(`input[name="Quantities[${id}]"]`);
                if (!input) return null;
                return { Id: id, Quantity: parseInt(input.value) || 1 };
            }).filter(item => item !== null);
            
            if (items.length === 0) {
                return;
            }
            
            console.log(`Request #${currentRequestId} - Final items to send:`, JSON.stringify(items, null, 2));
            
            const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
            const checkoutBtn = document.getElementById('checkoutBtn');
            
            if (!checkoutBtn) {
                showToast('Không tìm thấy nút thanh toán', true);
                return;
            }

            // Prevent double submission
            if (checkoutBtn.disabled) {
                console.log(`Request #${currentRequestId} - Checkout button is already disabled, preventing double submission`);
                return;
            }

            // Set global flag
            isCheckoutInProgress = true;

            try {
                // Set loading state
                checkoutBtn.disabled = true;
                checkoutBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Đang xử lý...';
                
                console.log(`Request #${currentRequestId} - Sending checkout request with items:`, items);
                
                const res = await makeRequest('?handler=CheckoutAjax', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': token
                    },
                    body: JSON.stringify({ Items: items })
                });
                
                console.log(`Request #${currentRequestId} - Checkout response status:`, res.status);
                
                if (!res.ok) {
                    throw new Error(`HTTP error! status: ${res.status}`);
                }
                
                const data = await res.json();
                console.log(`Request #${currentRequestId} - Checkout response data:`, data);
                
                if(data.success) {
                    redirectToCheckout(data.redirectUrl || '/UserSite/Checkout');
                } else {
                    showToast(data.message || 'Lỗi khi thanh toán.', true);
                    resetCheckoutButton(checkoutBtn);
                }
            } catch(error) {
                console.error(`Request #${currentRequestId} - Checkout error:`, error);
                
                // Log more details about the error
                if (error.name === 'TypeError' && error.message.includes('JSON')) {
                    console.error('JSON parsing error - response might not be valid JSON');
                    showToast('Lỗi khi xử lý phản hồi từ máy chủ. Vui lòng thử lại.', true);
                } else if (error.name === 'AbortError') {
                    console.error('Request timeout');
                    showToast('Yêu cầu bị timeout. Vui lòng thử lại.', true);
                } else {
                    showToast('Lỗi khi thanh toán. Vui lòng thử lại.', true);
                }
                
                resetCheckoutButton(checkoutBtn);
            } finally {
                // Reset global flag
                isCheckoutInProgress = false;
                console.log(`Request #${currentRequestId} - Checkout completed`);
            }
        }

        // Helper function to reset checkout button
        function resetCheckoutButton(button) {
            if (button) {
                button.disabled = false;
                button.innerHTML = '<i class="fas fa-shopping-bag me-2"></i>Xác nhận đơn hàng';
            }
        }

        function updateTotalsUI(grandTotal) {
            const grandTotalFormatted = grandTotal.toLocaleString('vi-VN') + ' VNĐ';
            document.getElementById('subtotal').textContent = grandTotalFormatted;
            document.getElementById('grandTotal').textContent = grandTotalFormatted;
            
            const checkoutBtn = document.getElementById('checkoutBtn');
            const hasSelection = getSelectedIds().length > 0;
            checkoutBtn.disabled = !hasSelection;
        }

        // Function to handle select all checkbox
        function handleSelectAll() {
            const selectAllCheckbox = document.getElementById('selectAll');
            const allCheckboxes = document.querySelectorAll('.item-checkbox');
            
            if (selectAllCheckbox) {
                allCheckboxes.forEach(cb => {
                    cb.checked = selectAllCheckbox.checked;
                });
            }
            
            updateSelection();
        }

        // Function to add loading state to buttons
        function setButtonLoading(button, isLoading, originalText) {
            if (isLoading) {
                button.disabled = true;
                button.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Đang xử lý...';
            } else {
                button.disabled = false;
                button.innerHTML = originalText;
            }
        }

        // Function to validate button click
        function validateButtonClick(button, action) {
            if (!button) {
                console.error('Button not found');
                return false;
            }
            
            if (button.disabled) {
                console.log('Button is disabled');
                return false;
            }
            
            console.log(`Executing ${action} for button:`, button);
            return true;
        }

        // Improved preventDoubleClick function
        function preventDoubleClick(button, callback) {
            if (!validateButtonClick(button, 'preventDoubleClick')) {
                return;
            }
            
            const originalText = button.innerHTML;
            setButtonLoading(button, true, originalText);
            
            // Handle async functions
            if (callback.constructor.name === 'AsyncFunction') {
                callback().catch(error => {
                    console.error('Error in async callback:', error);
                    showToast('Có lỗi xảy ra. Vui lòng thử lại.', true);
                }).finally(() => {
                    setTimeout(() => {
                        setButtonLoading(button, false, originalText);
                    }, 1000);
                });
            } else {
                try {
                    callback();
                } catch (error) {
                    console.error('Error in callback:', error);
                    showToast('Có lỗi xảy ra. Vui lòng thử lại.', true);
                } finally {
                    setTimeout(() => {
                        setButtonLoading(button, false, originalText);
                    }, 1000);
                }
            }
        }

        // Function to delete selected items
        async function deleteSelectedItems() {
            const selectedIds = getSelectedIds();
            
            if (selectedIds.length === 0) {
                showToast('Vui lòng chọn sản phẩm để xóa.', true);
                return;
            }

            const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

            try {
                const res = await makeRequest('?handler=DeleteSelected', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': token
                    },
                    body: JSON.stringify({ SelectedIds: selectedIds })
                });
                const data = await res.json();

                if (data.success) {
                    // Remove selected items from DOM
                    selectedIds.forEach(id => {
                        document.querySelectorAll(`[data-cart-item-id="${id}"]`).forEach(el => el.remove());
                    });
                    showToast('Đã xóa các sản phẩm đã chọn.');
                    
                    // Check if cart is now empty
                    const remainingItems = document.querySelectorAll('[data-cart-item-id]');
                    if (remainingItems.length === 0) {
                        window.location.reload();
                        return;
                    }
                    
                    await updateSelection();
                    updateQuantityControlsState();
                } else {
                    showToast(data.message || 'Lỗi khi xóa sản phẩm.', true);
                }
            } catch (error) {
                console.error('Delete selected error:', error);
                showToast('Không thể xóa sản phẩm. Vui lòng thử lại.', true);
            }
        }

        // Function to redirect to checkout page
        function redirectToCheckout(url = null) {
            const redirectUrl = url || '/UserSite/Checkout';
            
            showToast('Đang chuyển hướng đến trang thanh toán...');
            
            setTimeout(() => {
                window.location.href = redirectUrl;
            }, 500);
        }

        // Initial setup on page load
        document.addEventListener('DOMContentLoaded', () => {
            // Prevent multiple initialization
            if (eventListenersInitialized) {
                console.log('Event listeners already initialized, skipping');
                return;
            }
            
            console.log('Initializing event listeners...');
            eventListenersInitialized = true;
            
            // Set initial totals and checkout button state
            updateSelection();
            // Update quantity controls state
            updateQuantityControlsState();
            
            // Add event listeners for quantity buttons
            document.addEventListener('click', function(e) {
                // Stop event propagation to prevent conflicts
                e.stopPropagation();
                
                // Quantity minus button
                if (e.target.closest('.quantity-minus')) {
                    e.preventDefault();
                    const button = e.target.closest('.quantity-minus');
                    const cartItemId = parseInt(button.getAttribute('data-cart-item-id'));
                    const increment = parseInt(button.getAttribute('data-increment'));
                    handleQuantityButtonClick(cartItemId, increment);
                    return;
                }
                
                // Quantity plus button
                if (e.target.closest('.quantity-plus')) {
                    e.preventDefault();
                    const button = e.target.closest('.quantity-plus');
                    const cartItemId = parseInt(button.getAttribute('data-cart-item-id'));
                    const increment = parseInt(button.getAttribute('data-increment'));
                    handleQuantityButtonClick(cartItemId, increment);
                    return;
                }
                
                // Delete cart item button
                if (e.target.closest('.delete-cart-item')) {
                    e.preventDefault();
                    const button = e.target.closest('.delete-cart-item');
                    const cartItemId = parseInt(button.getAttribute('data-cart-item-id'));
                    preventDoubleClick(button, () => deleteCartItem(cartItemId));
                    return;
                }
                
                // Delete selected items button
                if (e.target.closest('.delete-selected-btn')) {
                    e.preventDefault();
                    const button = e.target.closest('.delete-selected-btn');
                    const confirmMessage = button.getAttribute('data-confirm');
                    if (confirm(confirmMessage)) {
                        preventDoubleClick(button, () => deleteSelectedItems());
                    }
                    return;
                }
                
                // Checkout button - prevent multiple clicks
                if (e.target.closest('.checkout-btn')) {
                    e.preventDefault();
                    e.stopImmediatePropagation();
                    
                    const checkoutBtn = e.target.closest('.checkout-btn');
                    if (checkoutBtn.disabled) {
                        console.log('Checkout button is already disabled, preventing double click');
                        return;
                    }
                    
                    console.log('Checkout button clicked, calling checkout function');
                    checkout();
                    return;
                }
            });
            
            // Add event listeners for quantity inputs
            document.addEventListener('change', function(e) {
                if (e.target.classList.contains('quantity-input') || e.target.classList.contains('quantity-input-mobile')) {
                    const input = e.target;
                    const cartItemId = parseInt(input.getAttribute('data-cart-item-id'));
                    handleQuantityChange(cartItemId, input.value);
                }
            });
            
            // Add event listeners for quantity inputs on blur
            document.addEventListener('blur', function(e) {
                if (e.target.classList.contains('quantity-input') || e.target.classList.contains('quantity-input-mobile')) {
                    const input = e.target;
                    const cartItemId = parseInt(input.getAttribute('data-cart-item-id'));
                    validateQuantityInput(cartItemId);
                }
            }, true);
            
            console.log('Event listeners initialized successfully');
        });

        // Xử lý chọn địa chỉ giao hàng
        document.addEventListener('DOMContentLoaded', function() {
            const currentAddressRadio = document.getElementById('currentAddress');
            const newAddressRadio = document.getElementById('newAddress');
            const newAddressForm = document.getElementById('newAddressForm');
            const addressDisplay = document.getElementById('addressDisplay');
            
            // Địa chỉ hiện tại
            const currentAddress = {
                name: '@(string.IsNullOrEmpty(Model.CurrentUser?.NormalName) ? "Chưa có tên" : Model.CurrentUser.NormalName)',
                phone: '@(string.IsNullOrEmpty(Model.CurrentUser?.PhoneNumber) ? "Chưa có số điện thoại" : Model.CurrentUser.PhoneNumber)',
                address: '@(string.IsNullOrEmpty(Model.CurrentUser?.Address) ? "Chưa có địa chỉ" : Model.CurrentUser.Address)'
            };

            function updateAddressDisplay() {
                if (currentAddressRadio.checked) {
                    newAddressForm.style.display = 'none';
                    addressDisplay.innerHTML = `
                        <strong>${currentAddress.name}</strong><br>
                        <i class="fas fa-phone me-1"></i> ${currentAddress.phone}<br>
                        <i class="fas fa-map-marker-alt me-1"></i> ${currentAddress.address}
                    `;
                } else {
                    newAddressForm.style.display = 'block';
                    updateNewAddressDisplay();
                }
            }

            function updateNewAddressDisplay() {
                const name = document.getElementById('receiverName').value || 'Chưa nhập tên';
                const phone = document.getElementById('receiverPhone').value || 'Chưa nhập số điện thoại';
                const address = document.getElementById('receiverAddress').value || 'Chưa nhập địa chỉ';
                
                addressDisplay.innerHTML = `
                    <strong>${name}</strong><br>
                    <i class="fas fa-phone me-1"></i> ${phone}<br>
                    <i class="fas fa-map-marker-alt me-1"></i> ${address}
                `;
            }

            // Validation cho địa chỉ mới
            function validateNewAddress() {
                if (!newAddressRadio.checked) {
                    // Kiểm tra địa chỉ hiện tại - check tất cả trường
                    if (!currentAddress.name || currentAddress.name === 'Chưa có tên' || 
                        !currentAddress.phone || currentAddress.phone === 'Chưa có số điện thoại' ||
                        !currentAddress.address || currentAddress.address === 'Chưa có địa chỉ') {
                        // Hiển thị alert với 2 lựa chọn
                        showAddressAlert();
                        return false;
                    }
                    return true; // Sử dụng địa chỉ hiện tại
                }

                const name = document.getElementById('receiverName').value.trim();
                const phone = document.getElementById('receiverPhone').value.trim();
                const address = document.getElementById('receiverAddress').value.trim();

                if (!name) {
                    showToast('Vui lòng nhập tên người nhận', true);
                    return false;
                }

                if (!phone) {
                    showToast('Vui lòng nhập số điện thoại', true);
                    return false;
                }

                if (!address) {
                    showToast('Vui lòng nhập địa chỉ giao hàng', true);
                    return false;
                }

                return true;
            }

            // Hàm hiển thị alert khi địa chỉ hiện tại thiếu thông tin
            function showAddressAlert() {
                // Tạo modal alert
                const alertModal = document.createElement('div');
                alertModal.className = 'modal fade';
                alertModal.id = 'addressAlertModal';
                alertModal.innerHTML = `
                    <div class="modal-dialog modal-dialog-centered">
                        <div class="modal-content">
                            <div class="modal-header bg-warning text-dark">
                                <h5 class="modal-title">
                                    <i class="fas fa-exclamation-triangle me-2"></i>
                                    Thông tin địa chỉ không đầy đủ
                                </h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                            </div>
                            <div class="modal-body">
                                <p>Địa chỉ hiện tại của bạn chưa đầy đủ thông tin để giao hàng.</p>
                                <p>Bạn có thể:</p>
                                <ul>
                                    <li><strong>Cập nhật thông tin cá nhân</strong> trong trang hồ sơ</li>
                                    <li><strong>Nhập địa chỉ mới</strong> cho đơn hàng này</li>
                                </ul>
                            </div>
                            <div class="modal-footer">
                                <a href="/profile" class="btn btn-primary">
                                    <i class="fas fa-user-edit me-2"></i>Cập nhật hồ sơ
                                </a>
                                <button type="button" class="btn btn-success" onclick="switchToNewAddress()">
                                    <i class="fas fa-plus me-2"></i>Nhập địa chỉ mới
                                </button>
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                                    <i class="fas fa-times me-2"></i>Đóng
                                </button>
                            </div>
                        </div>
                    </div>
                `;
                
                document.body.appendChild(alertModal);
                
                // Hiển thị modal
                const modal = new bootstrap.Modal(alertModal);
                modal.show();
                
                // Xóa modal khi đóng
                alertModal.addEventListener('hidden.bs.modal', function() {
                    alertModal.remove();
                });
            }

            // Hàm chuyển sang nhập địa chỉ mới
            window.switchToNewAddress = function() {
                // Đóng modal
                const modal = bootstrap.Modal.getInstance(document.getElementById('addressAlertModal'));
                if (modal) {
                    modal.hide();
                }
                
                // Chuyển sang chọn địa chỉ mới
                document.getElementById('newAddress').checked = true;
                updateAddressDisplay();
                
                // Focus vào ô nhập địa chỉ
                setTimeout(() => {
                    const addressInput = document.getElementById('receiverAddress');
                    if (addressInput) {
                        addressInput.focus();
                    }
                }, 300);
            };

            // Lấy thông tin địa chỉ đã chọn
            function getSelectedAddress() {
                if (currentAddressRadio.checked) {
                    return {
                        receiverName: currentAddress.name,
                        receiverPhone: currentAddress.phone,
                        shippingAddress: currentAddress.address,
                        deliveryNote: ''
                    };
                } else {
                    return {
                        receiverName: document.getElementById('receiverName').value.trim(),
                        receiverPhone: document.getElementById('receiverPhone').value.trim(),
                        shippingAddress: document.getElementById('receiverAddress').value.trim(),
                        deliveryNote: document.getElementById('deliveryNote').value.trim()
                    };
                }
            }

            // Gắn event listeners
            if (currentAddressRadio) {
                currentAddressRadio.addEventListener('change', updateAddressDisplay);
            }
            if (newAddressRadio) {
                newAddressRadio.addEventListener('change', updateAddressDisplay);
            }

            // Cập nhật hiển thị khi nhập địa chỉ mới
            const receiverNameInput = document.getElementById('receiverName');
            const receiverPhoneInput = document.getElementById('receiverPhone');
            const receiverAddressInput = document.getElementById('receiverAddress');

            if (receiverNameInput) {
                receiverNameInput.addEventListener('input', updateNewAddressDisplay);
            }
            if (receiverPhoneInput) {
                receiverPhoneInput.addEventListener('input', updateNewAddressDisplay);
            }
            if (receiverAddressInput) {
                receiverAddressInput.addEventListener('input', updateNewAddressDisplay);
            }

            // Override checkout function để thêm validation địa chỉ
            const originalCheckoutBtn = document.getElementById('checkoutBtn');
            if (originalCheckoutBtn) {
                originalCheckoutBtn.addEventListener('click', function(e) {
                    e.preventDefault();
                    
                    // Kiểm tra địa chỉ trước khi checkout
                    if (!validateNewAddress()) {
                        return;
                    }

                    // Lấy thông tin địa chỉ
                    const addressInfo = getSelectedAddress();
                    
                    // Gọi hàm checkout gốc với thông tin địa chỉ
                    performCheckout(addressInfo);
                });
            }

            // Hàm checkout với thông tin địa chỉ
            async function performCheckout(addressInfo) {
                const selectedIds = getSelectedIds();
                if (selectedIds.length === 0) {
                    showToast('Vui lòng chọn sản phẩm để thanh toán', true);
                    return;
                }

                const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
                const items = selectedIds.map(id => {
                    const input = document.querySelector(`input[data-cart-item-id="${id}"]`);
                    return {
                        Id: id,
                        Quantity: parseInt(input.value) || 1
                    };
                });

                try {
                    const response = await makeRequest('?handler=CheckoutAjax', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': token
                        },
                        body: JSON.stringify({
                            Items: items,
                            AddressInfo: addressInfo
                        })
                    });

                    const data = await response.json();

                    if (data.success) {
                        showToast('Đơn hàng đã được tạo thành công!');
                        setTimeout(() => {
                            window.location.href = data.redirectUrl;
                        }, 1000);
                    } else {
                        showToast(data.message, true);
                    }
                } catch (error) {
                    console.error('Checkout error:', error);
                    showToast('Có lỗi xảy ra khi tạo đơn hàng. Vui lòng thử lại.', true);
                }
            }
        });
    </script>
}

@section Styles {
    <style>
        /* Cart Header */
        .cart-header {
            text-align: center;
            margin-bottom: 2rem;
        }

        .cart-title {
            font-size: 2.5rem;
            font-weight: 700;
            color: #2c3e50;
            margin-bottom: 0.5rem;
        }

        .cart-subtitle {
            font-size: 1.1rem;
        }

        /* Empty Cart */
        .empty-cart {
            text-align: center;
            padding: 4rem 2rem;
        }

        .empty-cart-icon {
            font-size: 6rem;
            color: #e9ecef;
            margin-bottom: 2rem;
        }

        .empty-cart-title {
            font-size: 2rem;
            color: #6c757d;
            margin-bottom: 1rem;
        }

        .empty-cart-description {
            font-size: 1.1rem;
            color: #6c757d;
            margin-bottom: 2rem;
        }

        .empty-cart-actions {
            display: flex;
            gap: 1rem;
            justify-content: center;
            flex-wrap: wrap;
        }

        /* Cart Card */
        .cart-card {
            border: none;
            border-radius: 15px;
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
            overflow: hidden;
        }

        .cart-card-header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            padding: 1.5rem;
            font-weight: 600;
        }

        /* Cart Item */
        .cart-item {
            transition: all 0.3s ease;
        }

        .cart-item:hover {
            background-color: #f8f9fa;
        }

        .cart-item-product {
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .cart-item-image {
            width: 80px;
            height: 80px;
            border-radius: 10px;
            overflow: hidden;
            flex-shrink: 0;
        }

        .product-image {
            width: 100%;
            height: 100%;
            object-fit: cover;
            transition: transform 0.3s ease;
        }

        .product-image:hover {
            transform: scale(1.1);
        }

        .cart-item-name {
            font-weight: 600;
            margin-bottom: 0.5rem;
        }

        .cart-item-name a {
            color: #2c3e50;
        }

        .cart-item-name a:hover {
            color: #667eea;
        }

        .cart-item-material {
            color: #6c757d;
            font-size: 0.9rem;
            margin: 0;
        }

        .cart-item-price {
            display: flex;
            flex-direction: column;
            align-items: center;
        }

        .price-amount {
            font-size: 1.2rem;
            font-weight: 700;
            color: #667eea;
        }

        .price-currency {
            font-size: 0.9rem;
            color: #6c757d;
        }

        /* Quantity Controls */
        .quantity-controls {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
        }

        .quantity-input-group {
            display: flex;
            align-items: center;
            border: 2px solid #e9ecef;
            border-radius: 8px;
            overflow: hidden;
        }

        .btn-quantity {
            border: none;
            background: #f8f9fa;
            color: #6c757d;
            padding: 0.5rem 0.75rem;
            transition: all 0.3s ease;
        }

        .btn-quantity:hover {
            background: #667eea;
            color: white;
        }

        .btn-quantity:disabled {
            background: #e9ecef;
            color: #adb5bd;
            cursor: not-allowed;
            opacity: 0.6;
        }

        .btn-quantity:disabled:hover {
            background: #e9ecef;
            color: #adb5bd;
            transform: none;
        }

        .quantity-input {
            border: none;
            text-align: center;
            padding: 0.5rem;
            width: 60px;
            font-weight: 600;
        }

        .quantity-input:focus {
            outline: none;
            box-shadow: none;
        }

        .quantity-input:disabled {
            background-color: #e9ecef;
            color: #adb5bd;
            cursor: not-allowed;
            opacity: 0.6;
        }

        .quantity-info {
            text-align: center;
        }

        .stock-warning {
            color: #ffc107;
            font-size: 0.8rem;
            margin-top: 0.25rem;
        }

        .stock-danger {
            color: #dc3545;
            font-size: 0.8rem;
            margin-top: 0.25rem;
        }

        /* Cart Item Total */
        .cart-item-total {
            display: flex;
            flex-direction: column;
            align-items: flex-end;
        }

        .total-amount {
            font-size: 1.2rem;
            font-weight: 700;
            color: #2c3e50;
        }

        .total-currency {
            font-size: 0.9rem;
            color: #6c757d;
        }

        /* Remove Button */
        .btn-remove {
            background: none;
            border: 2px solid #dc3545;
            color: #dc3545;
            border-radius: 8px;
            padding: 0.5rem 1rem;
            transition: all 0.3s ease;
        }

        .btn-remove:hover {
            background: #dc3545;
            color: white;
        }

        /* Mobile Cart Item */
        .cart-item-mobile {
            border: none;
            border-radius: 15px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
        }

        .cart-item-mobile-content {
            display: flex;
            gap: 1rem;
        }

        .cart-item-mobile-image {
            width: 60px;
            height: 60px;
            border-radius: 8px;
            overflow: hidden;
            flex-shrink: 0;
        }

        .product-image-mobile {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        .cart-item-mobile-details {
            flex: 1;
        }

        .cart-item-mobile-name {
            font-weight: 600;
            margin-bottom: 0.5rem;
        }

        .cart-item-mobile-name a {
            color: #2c3e50;
        }

        .cart-item-mobile-price {
            margin-bottom: 1rem;
        }

        .quantity-controls-mobile {
            margin-bottom: 1rem;
        }

        .quantity-input-group-mobile {
            display: flex;
            align-items: center;
            border: 2px solid #e9ecef;
            border-radius: 8px;
            overflow: hidden;
            margin-bottom: 0.5rem;
        }

        .btn-quantity-mobile {
            border: none;
            background: #f8f9fa;
            color: #6c757d;
            padding: 0.25rem 0.5rem;
            font-size: 0.8rem;
        }

        .btn-quantity-mobile:disabled {
            background: #e9ecef;
            color: #adb5bd;
            cursor: not-allowed;
            opacity: 0.6;
        }

        .btn-quantity-mobile:disabled:hover {
            background: #e9ecef;
            color: #adb5bd;
        }

        .quantity-input-mobile {
            border: none;
            text-align: center;
            padding: 0.25rem;
            width: 50px;
            font-size: 0.9rem;
        }

        .quantity-input-mobile:disabled {
            background-color: #e9ecef;
            color: #adb5bd;
            cursor: not-allowed;
            opacity: 0.6;
        }

        .cart-item-mobile-total {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            margin-bottom: 1rem;
        }

        .total-label {
            font-weight: 600;
            color: #6c757d;
        }

        .btn-remove-mobile {
            background: #dc3545;
            color: white;
            border: none;
            border-radius: 8px;
            padding: 0.5rem 1rem;
            font-size: 0.9rem;
        }

        /* Cart Summary */
        .cart-summary {
            margin-top: 2rem;
        }

        .cart-actions {
            display: flex;
            gap: 1rem;
            flex-wrap: wrap;
        }

        .cart-total-card {
            background: white;
            border-radius: 15px;
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
            overflow: hidden;
        }

        .cart-total-header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 1.5rem;
            text-align: center;
        }

        .cart-total-body {
            padding: 1.5rem;
        }

        .cart-total-item {
            display: flex;
            justify-content: space-between;
            margin-bottom: 1rem;
            font-size: 1rem;
        }

        .cart-total-final {
            font-size: 1.2rem;
            font-weight: 700;
            color: #2c3e50;
            margin-bottom: 0;
        }

        .cart-total-footer {
            padding: 1.5rem;
            background: #f8f9fa;
        }

        /* Toast Message */
        .toast-message {
            position: fixed;
            bottom: 20px;
            right: 20px;
            background: linear-gradient(135deg, #dc3545 0%, #fd7e14 100%);
            color: white;
            padding: 1rem 2rem;
            border-radius: 12px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
            z-index: 1000;
            transform: translateX(400px);
            transition: transform 0.3s ease;
            max-width: 300px;
            white-space: pre-line;
        }

        .toast-message.success {
            background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
        }

        .toast-message.error {
            background: linear-gradient(135deg, #dc3545 0%, #fd7e14 100%);
        }

        .toast-message.show {
            transform: translateX(0);
        }

        /* Responsive */
        @@media (max-width: 991.98px) {
            .cart-title {
                font-size: 2rem;
            }
            
            .empty-cart-actions {
                flex-direction: column;
                align-items: center;
            }
            
            .cart-actions {
                justify-content: center;
            }
        }

        @@media (max-width: 575.98px) {
            .cart-title {
                font-size: 1.5rem;
            }
            
            .cart-item-mobile-content {
                flex-direction: column;
                text-align: center;
            }
            
            .cart-item-mobile-image {
                align-self: center;
            }
        }

        /* Mobile touch improvements */
        @@media (max-width: 768px) {
            .btn-quantity-mobile {
                min-height: 44px;
                min-width: 44px;
                touch-action: manipulation;
            }
            
            .quantity-input-mobile {
                min-height: 44px;
                touch-action: manipulation;
            }
            
            .btn-remove-mobile {
                min-height: 44px;
                touch-action: manipulation;
            }
            
            .checkout-btn {
                min-height: 50px;
                touch-action: manipulation;
            }
        }

        /* Prevent text selection on buttons */
        .btn-quantity, .btn-quantity-mobile, .btn-remove, .btn-remove-mobile, .checkout-btn {
            user-select: none;
            -webkit-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
        }

        /* Button improvements */
        .btn-quantity, .btn-quantity-mobile {
            position: relative;
            z-index: 1;
            min-width: 40px;
            min-height: 40px;
        }

        .btn-remove, .btn-remove-mobile {
            position: relative;
            z-index: 1;
            min-width: 44px;
            min-height: 44px;
        }

        .checkout-btn {
            position: relative;
            z-index: 1;
            min-height: 50px;
        }

        .delete-selected-btn {
            position: relative;
            z-index: 1;
            min-height: 44px;
        }

        /* Prevent button overlap */
        .quantity-input-group, .quantity-input-group-mobile {
            position: relative;
            z-index: 1;
        }

        /* Ensure proper button spacing */
        .cart-actions {
            display: flex;
            gap: 1rem;
            flex-wrap: wrap;
            align-items: center;
        }

        .cart-item-mobile-actions {
            margin-top: 1rem;
        }

        /* Address Alert Modal Styles */
        #addressAlertModal .modal-content {
            border: none;
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
        }

        #addressAlertModal .modal-header {
            border-bottom: 1px solid rgba(255, 193, 7, 0.3);
            border-radius: 15px 15px 0 0;
        }

        #addressAlertModal .modal-body {
            padding: 1.5rem;
        }

        #addressAlertModal .modal-body ul {
            margin-bottom: 0;
        }

        #addressAlertModal .modal-body li {
            margin-bottom: 0.5rem;
        }

        #addressAlertModal .modal-footer {
            border-top: 1px solid rgba(0, 0, 0, 0.1);
            border-radius: 0 0 15px 15px;
            padding: 1rem 1.5rem;
        }

        #addressAlertModal .btn {
            border-radius: 8px;
            font-weight: 500;
            padding: 0.5rem 1rem;
        }
    </style>
}
