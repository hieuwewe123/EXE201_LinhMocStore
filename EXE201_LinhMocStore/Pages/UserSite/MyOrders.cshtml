@page
@using EXE201_LinhMocStore.Models
@model EXE201_LinhMocStore.Pages.UserSite.MyOrdersModel
@{
    ViewData["Title"] = "Đơn hàng của tôi - Linh Mộc Store";
}

<div class="container py-5">
    <div class="row">
        <div class="col-12">
            <div class="orders-header mb-4">
                <h1 class="orders-title">
                    <i class="fas fa-shopping-bag me-3"></i>Đơn hàng của tôi
                </h1>
                <p class="orders-subtitle text-muted">Theo dõi và quản lý đơn hàng của bạn</p>
            </div>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(TempData["Message"]?.ToString()))
    {
        <div class="alert alert-info alert-dismissible fade show" role="alert">
            <i class="fas fa-info-circle me-2"></i>
            @TempData["Message"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    @if (!Model.Orders.Any())
    {
        <div class="empty-orders">
            <div class="empty-orders-icon">
                <i class="fas fa-shopping-bag"></i>
            </div>
            <h3 class="empty-orders-title">Bạn chưa có đơn hàng nào</h3>
            <p class="empty-orders-description">Hãy khám phá các sản phẩm phong thủy tuyệt đẹp của chúng tôi</p>
            <div class="empty-orders-actions">
                <a href="/Products" class="btn btn-primary btn-lg">
                    <i class="fas fa-gem me-2"></i>Khám phá sản phẩm
                </a>
                <a href="/" class="btn btn-outline-primary btn-lg">
                    <i class="fas fa-home me-2"></i>Về trang chủ
                </a>
            </div>
        </div>
    }
    else
    {
        <!-- Filter Tabs -->
        <div class="orders-filter mb-4">
            <div class="nav nav-pills" id="ordersTab" role="tablist">
                <button class="nav-link active" id="all-tab" data-bs-toggle="pill" data-bs-target="#all" type="button" role="tab">
                    Tất cả (@Model.Orders.Count)
                </button>
                <button class="nav-link" id="pending-tab" data-bs-toggle="pill" data-bs-target="#pending" type="button" role="tab">
                    Chờ thanh toán (@Model.Orders.Count(o => o.Status == "PendingPayment"))
                </button>
                <button class="nav-link" id="awaiting-tab" data-bs-toggle="pill" data-bs-target="#awaiting" type="button" role="tab">
                    Chờ xác nhận (@Model.Orders.Count(o => o.Status == "AwaitingConfirmation"))
                </button>
                <button class="nav-link" id="processing-tab" data-bs-toggle="pill" data-bs-target="#processing" type="button" role="tab">
                    Đang xử lý (@Model.Orders.Count(o => o.Status == "Processing"))
                </button>
                <button class="nav-link" id="shipped-tab" data-bs-toggle="pill" data-bs-target="#shipped" type="button" role="tab">
                    Đang giao (@Model.Orders.Count(o => o.Status == "Shipped"))
                </button>
                <button class="nav-link" id="completed-tab" data-bs-toggle="pill" data-bs-target="#completed" type="button" role="tab">
                    Hoàn thành (@Model.Orders.Count(o => o.Status == "Completed"))
                </button>
                <button class="nav-link" id="cancelled-tab" data-bs-toggle="pill" data-bs-target="#cancelled" type="button" role="tab">
                    Đã hủy (@Model.Orders.Count(o => o.Status == "Cancelled"))
                </button>
            </div>
        </div>

        <!-- Orders Content -->
        <div class="tab-content" id="ordersTabContent">
            <!-- All Orders -->
            <div class="tab-pane fade show active" id="all" role="tabpanel">
                @foreach (var order in Model.Orders.OrderByDescending(o => o.OrderDate))
                {
                    var orderDetails = ViewData[$"OrderDetails_{order.OrderId}"] as List<OrderDetail> ?? new List<OrderDetail>();
                    ViewData["OrderDetails"] = orderDetails;
                    <partial name="_OrderCard" model="order" view-data="ViewData" />
                }
            </div>

            <!-- Pending Payment -->
            <div class="tab-pane fade" id="pending" role="tabpanel">
                @foreach (var order in Model.Orders.Where(o => o.Status == "PendingPayment").OrderByDescending(o => o.OrderDate))
                {
                    var orderDetails = ViewData[$"OrderDetails_{order.OrderId}"] as List<OrderDetail> ?? new List<OrderDetail>();
                    ViewData["OrderDetails"] = orderDetails;
                    <partial name="_OrderCard" model="order" view-data="ViewData" />
                }
            </div>

            <!-- Awaiting Confirmation -->
            <div class="tab-pane fade" id="awaiting" role="tabpanel">
                @foreach (var order in Model.Orders.Where(o => o.Status == "AwaitingConfirmation").OrderByDescending(o => o.OrderDate))
                {
                    var orderDetails = ViewData[$"OrderDetails_{order.OrderId}"] as List<OrderDetail> ?? new List<OrderDetail>();
                    ViewData["OrderDetails"] = orderDetails;
                    <partial name="_OrderCard" model="order" view-data="ViewData" />
                }
            </div>

            <!-- Processing -->
            <div class="tab-pane fade" id="processing" role="tabpanel">
                @foreach (var order in Model.Orders.Where(o => o.Status == "Processing").OrderByDescending(o => o.OrderDate))
                {
                    var orderDetails = ViewData[$"OrderDetails_{order.OrderId}"] as List<OrderDetail> ?? new List<OrderDetail>();
                    ViewData["OrderDetails"] = orderDetails;
                    <partial name="_OrderCard" model="order" view-data="ViewData" />
                }
            </div>

            <!-- Shipped -->
            <div class="tab-pane fade" id="shipped" role="tabpanel">
                @foreach (var order in Model.Orders.Where(o => o.Status == "Shipped").OrderByDescending(o => o.OrderDate))
                {
                    var orderDetails = ViewData[$"OrderDetails_{order.OrderId}"] as List<OrderDetail> ?? new List<OrderDetail>();
                    ViewData["OrderDetails"] = orderDetails;
                    <partial name="_OrderCard" model="order" view-data="ViewData" />
                }
            </div>

            <!-- Completed -->
            <div class="tab-pane fade" id="completed" role="tabpanel">
                @foreach (var order in Model.Orders.Where(o => o.Status == "Completed").OrderByDescending(o => o.OrderDate))
                {
                    var orderDetails = ViewData[$"OrderDetails_{order.OrderId}"] as List<OrderDetail> ?? new List<OrderDetail>();
                    ViewData["OrderDetails"] = orderDetails;
                    <partial name="_OrderCard" model="order" view-data="ViewData" />
                }
            </div>

            <!-- Cancelled -->
            <div class="tab-pane fade" id="cancelled" role="tabpanel">
                @foreach (var order in Model.Orders.Where(o => o.Status == "Cancelled").OrderByDescending(o => o.OrderDate))
                {
                    var orderDetails = ViewData[$"OrderDetails_{order.OrderId}"] as List<OrderDetail> ?? new List<OrderDetail>();
                    ViewData["OrderDetails"] = orderDetails;
                    <partial name="_OrderCard" model="order" view-data="ViewData" />
                }
            </div>
        </div>
    }
</div>

@section Scripts {
    <script>
        const isLoggedIn = @(Model.isLoggedIn ? "true" : "false");
        
        // Badge sẽ được khởi tạo tự động bởi site.js
        
        // Function to show order details
        function showOrderDetails(orderId) {
            window.location.href = `/UserSite/OrderDetails?orderId=${orderId}`;
        }
        
        // Function to get status badge class
        function getStatusBadgeClass(status) {
            switch(status) {
                case 'Pending': return 'bg-warning';
                case 'AwaitingConfirmation': return 'bg-info';
                case 'Confirmed': return 'bg-primary';
                case 'Shipped': return 'bg-info';
                case 'Delivered': return 'bg-success';
                case 'Cancelled': return 'bg-danger';
                default: return 'bg-secondary';
            }
        }
        
        // Function to get status text
        function getStatusText(status) {
            switch(status) {
                case 'Pending': return 'Chờ xử lý';
                case 'AwaitingConfirmation': return 'Chờ xác nhận';
                case 'Confirmed': return 'Đã xác nhận';
                case 'Shipped': return 'Đang giao';
                case 'Delivered': return 'Đã giao';
                case 'Cancelled': return 'Đã hủy';
                default: return status;
            }
        }
    </script>
}

@section Styles {
    <style>
        /* Orders Header */
        .orders-header {
            text-align: center;
            margin-bottom: 2rem;
        }

        .orders-title {
            font-size: 2.5rem;
            font-weight: 700;
            color: #2c3e50;
            margin-bottom: 0.5rem;
        }

        .orders-subtitle {
            font-size: 1.1rem;
        }

        /* Empty Orders */
        .empty-orders {
            text-align: center;
            padding: 4rem 2rem;
        }

        .empty-orders-icon {
            font-size: 6rem;
            color: #e9ecef;
            margin-bottom: 2rem;
        }

        .empty-orders-title {
            font-size: 2rem;
            color: #6c757d;
            margin-bottom: 1rem;
        }

        .empty-orders-description {
            font-size: 1.1rem;
            color: #6c757d;
            margin-bottom: 2rem;
        }

        .empty-orders-actions {
            display: flex;
            gap: 1rem;
            justify-content: center;
            flex-wrap: wrap;
        }

        /* Filter Tabs */
        .orders-filter {
            background: white;
            border-radius: 15px;
            padding: 1rem;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
        }

        .nav-pills .nav-link {
            color: #6c757d;
            border-radius: 25px;
            padding: 0.5rem 1.5rem;
            margin-right: 0.5rem;
            margin-bottom: 0.5rem;
            transition: all 0.3s ease;
        }

        .nav-pills .nav-link:hover {
            background-color: #f8f9fa;
            color: #667eea;
        }

        .nav-pills .nav-link.active {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
        }

        /* Toast Message */
        .toast-message {
            position: fixed;
            bottom: 20px;
            right: 20px;
            background: linear-gradient(135deg, #dc3545 0%, #fd7e14 100%);
            color: white;
            padding: 1rem 2rem;
            border-radius: 12px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
            z-index: 1000;
            transform: translateX(400px);
            transition: transform 0.3s ease;
            max-width: 300px;
            white-space: pre-line;
        }

        .toast-message.success {
            background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
        }

        .toast-message.error {
            background: linear-gradient(135deg, #dc3545 0%, #fd7e14 100%);
        }

        .toast-message.show {
            transform: translateX(0);
        }

        /* Responsive */
        @@media (max-width: 991.98px) {
            .orders-title {
                font-size: 2rem;
            }
            
            .empty-orders-actions {
                flex-direction: column;
                align-items: center;
            }
            
            .nav-pills .nav-link {
                font-size: 0.9rem;
                padding: 0.4rem 1rem;
            }
        }

        @@media (max-width: 575.98px) {
            .orders-title {
                font-size: 1.5rem;
            }
            
            .nav-pills {
                flex-wrap: wrap;
            }
            
            .nav-pills .nav-link {
                font-size: 0.8rem;
                padding: 0.3rem 0.8rem;
                margin-right: 0.3rem;
                margin-bottom: 0.3rem;
            }
        }
    </style>
} 